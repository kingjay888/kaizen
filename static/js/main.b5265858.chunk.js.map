{"version":3,"sources":["pages/Formulario.js","pages/Survey.js","App.js","serviceWorker.js","index.js"],"names":["enviarDados","personEmail","personTribe","personSquad","title","description","type","impact","timeSpendToday","timeSpendFuture","Promise","resolve","reject","myHeaders","Headers","append","fetch","method","headers","body","redirect","then","response","json","result","data","createCard","errors","message","catch","error","console","log","Formulario","useState","setPersonEmail","setPersonTribe","setPersonSquad","ideaName","setIdeaName","setType","setDescription","setImpact","benefits","setBenefits","setTimeSpendToday","setTimeSpendFuture","buttonEnabled","setButtonEnabled","open","setOpen","isLoading","setIsLoading","setError","errorMessage","setErrorMessage","handleClose","window","location","reload","useEffect","values","i","length","Fragment","Grid","container","spacing","item","xs","TextField","required","id","name","label","fullWidth","defaultValue","onChange","e","target","value","autoComplete","Typography","variant","gutterBottom","FormControl","component","RadioGroup","aria-label","FormControlLabel","control","Radio","multiline","inputProps","maxLength","LinearProgress","Button","color","disabled","onClick","a","res","style","width","Dialog","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","autoFocus","SurveyScreen","classes","makeStyles","theme","appBar","position","layout","marginLeft","marginRight","breakpoints","up","paper","marginTop","marginBottom","padding","stepper","buttons","display","justifyContent","button","useStyles","CssBaseline","AppBar","className","Toolbar","noWrap","Paper","align","step","Error","getStepContent","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b5265858.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\n\nfunction enviarDados(\n  personEmail,\n  personTribe,\n  personSquad,\n  title,\n  description,\n  type,\n  impact,\n  timeSpendToday,\n  timeSpendFuture,\n) {\n  return new Promise((resolve, reject) => {\n\n    var myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n    myHeaders.append(\"Bluesight-API-Token\", \"eyJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjo0MywiY3VycmVudF90aW1lIjoiMjAyMC0xMC0xNlQxNzo1ODozNS4zNTIrMDg6MDAifQ.4Pdfx7GO-Br3ciQzQugNZUpJmCNXwWuB_8bAztkk4mQ\");\n    myHeaders.append(\"Content-Type\", \"text/plain\");\n\n    var raw = \"{\\n  \\\"query\\\": \\\"mutation {\\n    createCard (\\n      input: {\\n        cardAttributes: {\\n          squadId: 463\\n          swimlaneName: \\\\\\\"Kaizen\\\\\\\"\\n\t\t  workstateName: \\\\\\\"Bank of Ideas\\\\\\\"\\n          title: \\\\\\\"\" + title + \"\\\\\\\"\\n          description: \\\\\\\"\" + description + \"\\\\\\\"\\n          secondaryLabelName: \\\\\\\"\" + impact + \"\\\\\\\"\\n          customField1: \\\\\\\"\" + personEmail + \"\\\\\\\"\\n          customField2: \\\\\\\"\" + personTribe + \"\\\\\\\"\\n          customField3: \\\\\\\"\" + personSquad + \"\\\\\\\"\\n          customField4: \\\\\\\"\" + timeSpendToday + \"\\\\\\\"\\n          customField5: \\\\\\\"\" + timeSpendFuture + \"\\\\\\\"\\n           primaryLabelNames: [\\n\t\t   {\\n\t\t     value: \\\\\\\"\" + type + \"\\\\\\\"\\n\t\t   }\\n\t\t ]\\n        }\\n      }\\n    )\\n    {\\n      card {\\n        identifier\\n      }\\n      errors {\\n        path\\n        message\\n      }\\n    }\\n  }\\\"\\n}\\n \";\n\n    var requestOptions = {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow'\n    };\n\n    fetch(\"https://singapore.bluesight.io/graphql\", requestOptions)\n      .then((response) => response.json())\n      .then((result) => {\n        if (result.data.createCard.errors != null) {\n          resolve(result.data.createCard.errors[0].message)\n        } else {\n          resolve(true)\n        }\n      })\n      .catch((error) => console.log(\"error\", error));\n  });\n}\n\nexport default function Formulario() {\n  const [personEmail, setPersonEmail] = useState(\"\");\n  const [personTribe, setPersonTribe] = useState(\"\");\n  const [personSquad, setPersonSquad] = useState(\"\");\n  const [ideaName, setIdeaName] = useState(\"\");\n  const [type, setType] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [impact, setImpact] = useState(\"\");\n  const [benefits, setBenefits] = useState(\"\");\n  const [timeSpendToday, setTimeSpendToday] = useState(\"\");\n  const [timeSpendFuture, setTimeSpendFuture] = useState(\"\");\n  const [buttonEnabled, setButtonEnabled] = useState(false);\n  const [open, setOpen] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    if (!error) {\n      window.location.reload();\n      // setPersonEmail(\"\")\n      // setPersonTribe(\"\")\n      // setPersonSquad(\"\")\n      // setIdeaName(\"\")\n      // setType(\"\")\n      // setDescription(\"\")\n      // setImpact(\"\")\n      // setBenefits(\"\")\n      // setTimeSpendToday(\"\")\n      // setTimeSpendFuture(\"\")\n    }\n    setOpen(false);\n  };\n\n  useEffect(\n    () => {\n      var values = [\n        personEmail,\n        personTribe,\n        personSquad,\n        ideaName,\n        type,\n        description,\n        impact,\n        benefits,\n      ];\n      var i = 0;\n      while (i < values.length) {\n        if (values[i] === \"\") {\n          setButtonEnabled(false);\n          break;\n        }\n        i++;\n      }\n      if (i === values.length) {\n        setButtonEnabled(true);\n      }\n    },\n    [\n      personEmail,\n      personTribe,\n      personSquad,\n      ideaName,\n      type,\n      description,\n      impact,\n      benefits,\n      timeSpendToday,\n      timeSpendFuture,\n    ],\n  );\n\n  return (\n    <React.Fragment>\n      <Grid container spacing={3}>\n        <Grid item xs={12}>\n          <TextField\n            required\n            id=\"personEmail\"\n            name=\"personEmail\"\n            label=\"Person Email:\"\n            fullWidth\n            defaultValue={personEmail}\n            onChange={(e) => setPersonEmail(e.target.value)}\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <TextField\n            required\n            id=\"personTribe\"\n            name=\"personTribe\"\n            label=\"Person Tribe:\"\n            fullWidth\n            defaultValue={personTribe}\n            onChange={(e) => setPersonTribe(e.target.value)}\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <TextField\n            required\n            id=\"personSquad\"\n            name=\"personSquad\"\n            label=\"Person Squad:\"\n            fullWidth\n            defaultValue={personSquad}\n            onChange={(e) => setPersonSquad(e.target.value)}\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <TextField\n            required\n            id=\"ideaName\"\n            name=\"ideaName\"\n            label=\"Name of Idea\"\n            fullWidth\n            autoComplete=\"fname\"\n            defaultValue={ideaName}\n            onChange={(e) => setIdeaName(e.target.value)}\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <Typography variant=\"h6\" gutterBottom>\n            Type *\n          </Typography>\n          <FormControl component=\"fieldset\">\n            <RadioGroup\n              aria-label=\"type\"\n              name=\"type\"\n              value={type}\n              onChange={(e) => setType(e.target.value)}\n            >\n              <FormControlLabel\n                value=\"Automation\"\n                control={<Radio />}\n                label=\"Automation\"\n              />\n              <FormControlLabel\n                value=\"Process improvement\"\n                control={<Radio />}\n                label=\"Process improvement\"\n              />\n              <FormControlLabel\n                value=\"New tool\"\n                control={<Radio />}\n                label=\"New tool\"\n              />\n              <FormControlLabel\n                value=\"Others\"\n                control={<Radio />}\n                label=\"Others\"\n              />\n            </RadioGroup>\n          </FormControl>\n        </Grid>\n        <Grid item xs={12}>\n          <TextField\n            required\n            id=\"description\"\n            name=\"description\"\n            label=\"Description\"\n            fullWidth\n            autoComplete=\"\"\n            multiline\n            defaultValue={description}\n            onChange={(e) => setDescription(e.target.value)}\n            inputProps={{ maxLength: 400 }}\n          />\n          <p>Max : 400 Characters</p>\n        </Grid>\n        <Grid item xs={12}>\n          <Typography variant=\"h6\" gutterBottom>\n            Impact *\n          </Typography>\n          <FormControl component=\"fieldset\">\n            <RadioGroup\n              aria-label=\"gender\"\n              name=\"impact\"\n              value={impact}\n              onChange={(e) => setImpact(e.target.value)}\n            >\n              <FormControlLabel\n                value=\"Squad\"\n                control={<Radio />}\n                label=\"Squad\"\n              />\n              <FormControlLabel\n                value=\"Account\"\n                control={<Radio />}\n                label=\"Account\"\n              />\n              <FormControlLabel\n                value=\"Tribe\"\n                control={<Radio />}\n                label=\"Tribe\"\n              />\n              <FormControlLabel\n                value=\"More than one tribe\"\n                control={<Radio />}\n                label=\"More than one tribe\"\n              />\n            </RadioGroup>\n          </FormControl>\n        </Grid>\n        <Grid item xs={12}>\n          <TextField\n            required\n            id=\"benefits\"\n            name=\"benefits\"\n            label=\"Benefits\"\n            fullWidth\n            autoComplete=\"\"\n            multiline\n            defaultValue={benefits}\n            inputProps={{ maxLength: 400 }}\n            onChange={(e) => setBenefits(e.target.value)}\n          />\n          <p>Max : 400 Characters</p>\n        </Grid>\n        <Grid item xs={12}>\n          <TextField\n            id=\"time_spend_today\"\n            name=\"time_spend_today\"\n            label=\"Time Spent in the Current Scenario (min/month)\"\n            fullWidth\n            autoComplete=\"\"\n            multiline\n            defaultValue={timeSpendToday}\n            onChange={(e) => setTimeSpendToday(e.target.value)}\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <TextField\n            id=\"time_spend_future\"\n            name=\"time_spend_future\"\n            label=\"Time Spent in the Desired Scenario (min/month)\"\n            fullWidth\n            autoComplete=\"\"\n            multiline\n            defaultValue={timeSpendFuture}\n            onChange={(e) => setTimeSpendFuture(e.target.value)}\n          />\n        </Grid>\n        <Grid item xs={12}>\n          {isLoading ? <LinearProgress /> : \"\"}\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            disabled={!buttonEnabled}\n            onClick={async () => {\n              setIsLoading(true);\n              var title = \"Idea : \" + ideaName;\n              // , type, description, impact, benefits, timeSpendToday, timeSpendFuture\n              var body = \"\";\n              // body += \"\" + personEmail + \" , \" + personTribe + \" , \" +\n              //   personSquad + \"<br/><br/>\";\n              // body += \"Tipo: \" + type + \"<br/><br/>\";\n              body += \"Description: \" + description + \"<br/><br/>\";\n              // body += \"Impacto: \" + impact + \"<br/><br/>\";\n              body += \"Benefits: \" + benefits + \"<br/><br/>\";\n              // body += \"Tempo Gasto no Cenário Atual (min/mês): \" + timeSpendToday + \"<br/><br/>\";\n              // body += \"Tempo Gasto no Cenário Desejado (min/mês) \" + timeSpendFuture + \"<br/><br/>\";\n\n              var res = await enviarDados(\n                personEmail,\n                personTribe,\n                personSquad,\n                title,\n                body,\n                type,\n                impact,\n                timeSpendToday,\n                timeSpendFuture,\n              );\n              console.log(res);\n              if (res !== true) {\n                setError(true)\n                setErrorMessage(res)\n              } else {\n                setError(false)\n              }\n              setIsLoading(false);\n              handleClickOpen();\n            }}\n            style={{ width: \"100%\" }}\n          >\n            Submit Data\n          </Button>\n        </Grid>\n\n        <div>\n          <Dialog\n            open={open}\n            onClose={handleClose}\n            aria-labelledby=\"alert-dialog-title\"\n            aria-describedby=\"alert-dialog-description\"\n          >\n            <DialogTitle id=\"alert-dialog-title\">{\"Notice\"}</DialogTitle>\n            <DialogContent>\n              <DialogContentText id=\"alert-dialog-description\">\n                {(!error) ?\n                  \"Sent successfully! \\n Thanks \\n You can close this page\"\n                  :\n                  errorMessage\n                }\n\n              </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n              <Button onClick={handleClose} color=\"primary\" autoFocus>\n                OK\n              </Button>\n            </DialogActions>\n          </Dialog>\n        </div>\n      </Grid>\n    </React.Fragment>\n  );\n}\n","import React from \"react\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport Formulario from \"./Formulario\";\n\n\nexport default function SurveyScreen() {\n\n    const useStyles = makeStyles((theme) => ({\n        appBar: {\n            position: 'relative',\n        },\n        layout: {\n            width: 'auto',\n            marginLeft: theme.spacing(2),\n            marginRight: theme.spacing(2),\n            [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\n                width: 600,\n                marginLeft: 'auto',\n                marginRight: 'auto',\n            },\n        },\n        paper: {\n            marginTop: theme.spacing(3),\n            marginBottom: theme.spacing(3),\n            padding: theme.spacing(2),\n            [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\n                marginTop: theme.spacing(6),\n                marginBottom: theme.spacing(6),\n                padding: theme.spacing(3),\n            },\n        },\n        stepper: {\n            padding: theme.spacing(3, 0, 5),\n        },\n        buttons: {\n            display: 'flex',\n            justifyContent: 'flex-end',\n        },\n        button: {\n            marginTop: theme.spacing(3),\n            marginLeft: theme.spacing(1),\n        },\n    }));\n\n    function getStepContent(step) {\n        switch (step) {\n            case 0:\n                // return <AddressForm />;\n                return <Formulario />\n            case 1:\n                // return <PaymentForm />;\n                return <div>\n                    <Typography variant=\"h6\" gutterBottom>\n                        Your Data has been sent!\n                        <br />\n                        Thanks.\n                    </Typography>\n                </div>\n            default:\n                throw new Error('Unknown step');\n        }\n    }\n\n\n    const classes = useStyles();\n\n    return (\n        <React.Fragment>\n            <CssBaseline />\n            <AppBar position=\"absolute\" color=\"default\" className={classes.appBar}>\n                <Toolbar>\n                    <Typography variant=\"h6\" color=\"inherit\" noWrap>\n                        ISM Survey\n            </Typography>\n                </Toolbar>\n            </AppBar>\n            <main className={classes.layout}>\n                <Paper className={classes.paper}>\n                    <Typography component=\"h1\" variant=\"h4\" align=\"center\">\n                        Ideas for Kaizen\n            </Typography>\n                    <React.Fragment>\n                        <React.Fragment>\n                            {getStepContent(0)}\n                        </React.Fragment>\n                    </React.Fragment>\n                </Paper>\n            </main>\n        </React.Fragment>\n    );\n\n}","import React from 'react';\nimport './App.css';\nimport SurveyScreen from './pages/Survey';\n\nfunction App() {\n  return (\n    <div>\n      <SurveyScreen />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n    .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}